name: Build and Deploy to EC2

on:
  push:
    branches: [main]

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter (if available)
        run: npm run lint || echo "No lint script found, skipping..."

      - name: Run tests (if available)
        run: npm test -- --passWithNoTests || echo "No tests found, skipping..."

      - name: Build application
        run: npm run build

      - name: Create deployment package
        run: |
          # Création d'une archive avec les fichiers nécessaires
          tar -czf deployment.tar.gz \
            .next \
            package.json \
            package-lock.json \
            public \
            ecosystem.config.js \
            next.config.js \
            || echo "Some files might not exist, continuing..."

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 1

  deploy:
    name: Deploy to EC2
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Setup complete application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            set -e

            echo "🚀 Setting up application structure..."

            # Création/nettoyage du dossier de l'application
            mkdir -p /var/www/buyitnow-client
            cd /var/www/buyitnow-client

            # Sauvegarde de l'ancien build si existant
            if [ -d ".next" ]; then
              mv .next .next.backup.$(date +%Y%m%d_%H%M%S)
              # Garder seulement les 3 dernières sauvegardes
              ls -dt .next.backup.* 2>/dev/null | tail -n +4 | xargs rm -rf 2>/dev/null || true
            fi

            # Création/mise à jour des variables d'environnement
            echo "🔧 Updating environment variables..."
            echo "NODE_ENV=production" > .env
            echo "NEXT_PUBLIC_API_URL=http://51.112.78.112" >> .env

            # Ajout des secrets depuis GitHub (si définis)
            if [ ! -z "${{ secrets.DATABASE_URL }}" ]; then
              echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
            fi
            if [ ! -z "${{ secrets.NEXTAUTH_SECRET }}" ]; then
              echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
              echo "NEXTAUTH_URL=http://51.112.78.112" >> .env
            fi

            # Sécurisation du fichier d'environnement
            chmod 600 .env

            echo "✅ Environment configured"

      - name: Transfer build files
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          source: 'deployment.tar.gz'
          target: '/var/www/buyitnow-client/'

      - name: Complete deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            set -e

            cd /var/www/buyitnow-client

            echo "🧹 Cleaning old build and dependency files..."
            # Sauvegarde du build actuel avant suppression
            if [ -d ".next" ]; then
              mv .next .next.backup.$(date +%Y%m%d_%H%M%S)
            fi

            # Suppression complète des anciens fichiers
            echo "🗑️ Removing old node_modules and lock files..."
            rm -rf node_modules/
            rm -f package-lock.json
            rm -f npm-shrinkwrap.json
            rm -rf public/
            rm -rf .npm/
            rm -rf /tmp/.npm/

            # Nettoyage du cache npm
            npm cache clean --force

            # Nettoyage des anciennes sauvegardes (garder seulement les 3 dernières)
            ls -dt .next.backup.* 2>/dev/null | tail -n +4 | xargs rm -rf 2>/dev/null || true

            echo "📂 Extracting fresh build files..."
            tar -xzf deployment.tar.gz
            rm deployment.tar.gz

            echo "📚 Installing fresh production dependencies..."
            # Installation complètement propre avec optimisations mémoire
            npm ci --only=production --prefer-offline --no-audit --n

            echo "🔄 Restarting application..."
            pm2 restart buyitnow-client || pm2 start ecosystem.config.js

            echo "✅ Checking application status..."
            pm2 status buyitnow-client

            # Test de santé de l'application
            echo "🏥 Performing health check..."
            sleep 5

            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Application is healthy!"
            else
              echo "❌ Application health check failed"
              echo "📋 PM2 logs:"
              pm2 logs buyitnow-client --lines 10
              exit 1
            fi

            echo "🎉 Deployment completed successfully!"
            echo "🌐 Application available at: http://51.112.78.112"
