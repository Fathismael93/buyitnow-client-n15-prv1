name: Build and Deploy to EC2

on:
  push:
    branches: [main]

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter (if available)
        run: npm run lint || echo "No lint script found, skipping..."

      - name: Run tests (if available)
        run: npm test -- --passWithNoTests || echo "No tests found, skipping..."

      - name: Build application
        run: npm run build

      - name: Create deployment package
        run: |
          # Création d'une archive avec les fichiers nécessaires
          tar -czf deployment.tar.gz \
            .next \
            package.json \
            package-lock.json \
            public \
            ecosystem.config.js \
            next.config.mjs \
            middleware.js \
            || echo "Some files might not exist, continuing..."

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 1

  deploy:
    name: Deploy to EC2
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Setup complete application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            set -e

            echo "🚀 Setting up application structure..."

            # Création/nettoyage du dossier de l'application
            mkdir -p /var/www/buyitnow-client
            cd /var/www/buyitnow-client

            # Nettoyage complet des anciens fichiers
            echo "🧹 Cleaning old build and dependency files..."
            # Sauvegarde du build actuel avant suppression
            if [ -d ".next" ]; then
              mv .next .next.backup.$(date +%Y%m%d_%H%M%S)
            fi

            # Suppression complète des anciens fichiers
            echo "🗑️ Removing old node_modules and lock files..."
            rm -rf node_modules/
            rm -f package-lock.json
            rm -f npm-shrinkwrap.json
            rm -rf public/
            rm -rf .npm/
            rm -rf /tmp/.npm/

            # Nettoyage du cache npm
            npm cache clean --force

            # Nettoyage des anciennes sauvegardes (garder seulement les 3 dernières)
            ls -dt .next.backup.* 2>/dev/null | tail -n +4 | xargs rm -rf 2>/dev/null || true

            # Création/mise à jour des variables d'environnement
            echo "🔧 Updating environment variables..."
            cat > .env << 'EOF'
              # API Configuration
              API_URL=https://testing-apps.me/
              NEXT_PUBLIC_API_URL=https://testing-apps.me/

              # Site Configuration
              NEXT_PUBLIC_SITE_URL=https://testing-apps.me/
              NODE_ENV=production

              # NextAuth Configuration
              NEXTAUTH_URL=https://testing-apps.me/
              NEXTAUTH_SECRET=codingwithabbas

              # Database
              DB_URI=mongodb+srv://fathismael:DXowWbj4R713448e@buyitnow.rxm23ra.mongodb.net/buyitnow

              # Email Configuration
              NODEMAILER_EMAIL_ACCOUNT=fathismael@gmail.com
              NODEMAILER_PASSWORD_ACCOUNT=drclubstcasaasrn

              # Cloudinary Configuration
              NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=duzebhr9l
              NEXT_PUBLIC_CLOUDINARY_API_KEY=393742869713134
              CLOUDINARY_API_SECRET=pdfDsH-KgpjzeEccDEZsoRxA3ag

              # Sentry Configuration
              NEXT_PUBLIC_SENTRY_DSN=https://033fe39bb04df00bc177b66251444aa7@o4507932631040000.ingest.de.sentry.io/4507933004857424
              SENTRY_URL=https://sentry.io/
              SENTRY_PROJECT=buyitnow
              SENTRY_ORG=benew
              SENTRY_AUTH_TOKEN=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
              SENTRY_IGNORE_API_RESOLUTION_ERROR=1

              # Performance Configuration
              ANALYZE=false
              CACHE_MAX_AGE_CATEGORIES=7200
              CACHE_MAX_AGE_PRODUCTS=600
              DEFAULT_PRODUCTS_PER_PAGE=2
              MAX_PRODUCTS_PER_PAGE=5
              QUERY_TIMEOUT=5000

              # PWA Configuration
              NEXT_PUBLIC_ENABLE_SW=true
              EOF

            # Sécurisation du fichier d'environnement
            chmod 600 .env

            echo "✅ Environment configured"

      - name: Transfer build files
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          source: 'deployment.tar.gz'
          target: '/var/www/buyitnow-client/'

      - name: Complete deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            set -e

            cd /var/www/buyitnow-client

            echo "📂 Extracting fresh build files..."
            tar -xzf deployment.tar.gz
            rm deployment.tar.gz

            echo "📚 Installing fresh production dependencies..."
            # Installation complètement propre avec optimisations mémoire
            npm ci --omit=dev --prefer-offline --no-audit --no-fund --maxsockets 1 --registry https://registry.npmjs.org/

            echo "🔄 Restarting application..."
            pm2 restart buyitnow-client || pm2 start ecosystem.config.js

            echo "✅ Checking application status..."
            pm2 status buyitnow-client

            # Test de santé de l'application
            echo "🏥 Performing health check..."
            sleep 5

            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Application is healthy!"
            else
              echo "❌ Application health check failed"
              echo "📋 PM2 logs:"
              pm2 logs buyitnow-client --lines 10
              exit 1
            fi

            echo "🎉 Deployment completed successfully!"
            echo "🌐 Application available at: https://testing-apps.me"
